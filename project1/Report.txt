Uml Diagram:
	Open uml_class_diagram.pdf to see the class diagram

=========================================================================================================================

VALGRIND Check:

<path_to_directory_containing ./test>$ valgrind ./test 
==28385== Memcheck, a memory error detector
==28385== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==28385== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==28385== Command: ./test
==28385== 
--------------------
Number of times of Phone Shaked: 70
--------------------
Maximum sound Intensity during whole time: 64.4733
--------------------
Normal Surrounding sound in office, restaurents etc.
--------------------

==28385== 
==28385== HEAP SUMMARY:
==28385==     in use at exit: 0 bytes in 0 blocks
==28385==   total heap usage: 95,711 allocs, 95,711 frees, 4,932,982 bytes allocated
==28385== 
==28385== All heap blocks were freed -- no leaks are possible
==28385== 
==28385== For counts of detected and suppressed errors, rerun with: -v
==28385== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)


==============================================================================================================================

CPPCHECK:
	Here json.hpp is showing errors and except it all are working fine

<path_to_directory>$ cppcheck --enable=all .
Checking function.cpp ...
[function.cpp]: (information) Too many #ifdef configurations - cppcheck only checks 12 of 24 configurations. Use --force to check all configurations.
[json.hpp:9987]: (warning) %g in format string (no. 2) requires 'double' but the argument type is 'number_float_t'.
[json.hpp:2096]: (style) Class 'input_adapter' has a constructor with 1 argument that is not explicit.
[json.hpp:2100]: (style) Class 'input_adapter' has a constructor with 1 argument that is not explicit.
[json.hpp:2103]: (style) Class 'input_adapter' has a constructor with 1 argument that is not explicit.
[json.hpp:2106]: (style) Class 'input_adapter' has a constructor with 1 argument that is not explicit.
[json.hpp:2109]: (style) Class 'input_adapter' has a constructor with 1 argument that is not explicit.
[json.hpp:2131]: (style) Class 'input_adapter' has a constructor with 1 argument that is not explicit.
[json.hpp:2172]: (style) Class 'input_adapter' has a constructor with 1 argument that is not explicit.
[json.hpp:2180]: (style) Class 'input_adapter' has a constructor with 1 argument that is not explicit.
.........................
.........................
.........................
.........................
Checking function.cpp: _HAS_CXX14...
Checking function.cpp: _HAS_CXX17...
Checking function.cpp: _MSC_VER...
[json.hpp:11205]: (information) Skipping configuration '_MSC_VER' since the value of '_MSC_VER' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.
1/3 files checked 33% done
Checking header.cpp ...
[header.cpp]: (information) Too many #ifdef configurations - cppcheck only checks 12 of 24 configurations. Use --force to check all configurations.
Checking header.cpp: JSON_CATCH_USER...
Checking header.cpp: JSON_INTERNAL_CATCH_USER...
Checking header.cpp: JSON_NOEXCEPTION;_CPPUNWIND;__EXCEPTIONS;__cpp_exceptions...
Checking header.cpp: JSON_SKIP_UNSUPPORTED_COMPILER_CHECK...
Checking header.cpp: JSON_SKIP_UNSUPPORTED_COMPILER_CHECK;__GNUC__...
Checking header.cpp: JSON_SKIP_UNSUPPORTED_COMPILER_CHECK;__clang__...
Checking header.cpp: JSON_THROW_USER...
Checking header.cpp: JSON_TRY_USER...
Checking header.cpp: _HAS_CXX14...
Checking header.cpp: _HAS_CXX17...
Checking header.cpp: _MSC_VER...
2/3 files checked 66% done
Checking main.cpp ...

[main.cpp]: (information) Too many #ifdef configurations - cppcheck only checks 12 of 24 configurations. Use --force to check all configurations.
Checking main.cpp: JSON_CATCH_USER...
Checking main.cpp: JSON_INTERNAL_CATCH_USER...
Checking main.cpp: JSON_NOEXCEPTION;_CPPUNWIND;__EXCEPTIONS;__cpp_exceptions...
Checking main.cpp: JSON_SKIP_UNSUPPORTED_COMPILER_CHECK...
Checking main.cpp: JSON_SKIP_UNSUPPORTED_COMPILER_CHECK;__GNUC__...
Checking main.cpp: JSON_SKIP_UNSUPPORTED_COMPILER_CHECK;__clang__...
Checking main.cpp: JSON_THROW_USER...
Checking main.cpp: JSON_TRY_USER...
Checking main.cpp: _HAS_CXX14...
Checking main.cpp: _HAS_CXX17...
Checking main.cpp: _MSC_VER...
3/3 files checked 100% done
(information) Cppcheck cannot find all the include files (use --check-config for details)


=====================================================================================================================================


clang-format:
	It is to convert the code according to google c++ style format

	<path_to_directory>$ clang-format -i -style=Google main.cpp function.cpp function.h header.cpp header.h


=====================================================================================================================================

lcov:
	
How to run:
	Run below commands one by one and we get:-

	$ g++ -fprofile-arcs -ftest-coverage main.cpp function.cpp header.cpp -o test

	$ ./test

	$ lcov -o coverage.info -c -d .

	$ lcov -o coverage.info -c -d .


	Filename 		Line Coverage 	 			Functions 	 coverage
function.cpp	95.1%		39 / 41				100.0 %		4 / 4
header.cpp		100.0%		13 / 13				87.5 %		7 / 8
header.h		69.2%		9 / 13				61.5 %		8 / 13
json.hpp 		47.5%		578 / 1217			57.0 %		138 / 242
main.cpp 		100.0 %		39 / 39				100.0 %		3 / 3

Overall coverage rate:
  lines......: 64.8% (1597 of 2464 lines)
  functions..: 74.6% (1029 of 1380 functions)

  Also snapshot of coverage can be seen in coverage.png
